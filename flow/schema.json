{
    "inputs": [
        {
            "name": "Sample Options",
            "description": "Parameters relating to the sample being analysed.",
            "advanced": false,
            "params": {
                "mode": {
                    "name": "Processing mode.",
                    "description": "Specify the processing mode for the pipeline (fastq or assembled).",
                    "required": true,
                    "type": "string",
                    "default": "fastq",
                    "valid": [
                        "fastq",
                        "assembled"
                    ]
                },
                "input": {
                    "name": "Samples",
                    "description": "The samples to process.",
                    "required": true,
                    "type": "csv",
                    "use_tabs": true,
                    "takes_samples": true,
                    "sample_types": ["RNA-Seq"],
                    "columns": [
                        {
                            "name": "sample_id",
                            "type": "string",
                            "from_sample": "name",
                            "required": true,
                            "render": false
                        },
                        {
                            "name": "filename_R1",
                            "type": "data",
                            "from_sample": 1,
                            "required": true,
                            "render": false
                        },
                        {
                            "name": "filename_R2",
                            "type": "data",
                            "from_sample": 2,
                            "required": false,
                            "render": false
                        },
                        {
                            "name": "filename_I1",
                            "type": "data",
                            "required": false,
                            "render": true,
                            "pattern": "^\\S+\\.fq?(\\.gz)?$"
                        },
                        {
                            "name": "subject_id",
                            "type": "string",
                            "required": false,
                            "render": true
                        },
                        {
                            "name": "species",
                            "type": "string",
                            "required": false,
                            "render": true
                        },
                        {
                            "name": "pcr_target_locus",
                            "type": "string",
                            "required": false,
                            "render": true
                        },
                        {
                            "name": "tissue",
                            "type": "string",
                            "required": false,
                            "render": true
                        },
                        {
                            "name": "sex",
                            "type": "string",
                            "required": false,
                            "render": true
                        },
                        {
                            "name": "age",
                            "type": "string",
                            "required": false,
                            "render": true
                        },
                        {
                            "name": "biomaterial_provider",
                            "type": "string",
                            "required": false,
                            "render": true
                        },
                        {
                            "name": "single_cell",
                            "type": "string",
                            "required": false,
                            "render": true
                        },
                        {
                            "name": "intervention",
                            "type": "string",
                            "required": false,
                            "render": true
                        },
                        {
                            "name": "collection_time_point_relative",
                            "type": "string",
                            "required": false,
                            "render": true
                        },
                        {
                            "name": "cell_subset",
                            "type": "string",
                            "required": false,
                            "render": true
                        }
                    ]
                }
            }
        },
        {
            "name": "Primer input and positions",
            "description": "Define the primer region start and how to deal with the primer alignment.",
            "advanced": false,
            "params": {
                "cprimers": {
                    "name": "CPrimers",
                    "description": "The CPrimers file to use for the analysis.",
                    "required": false,
                    "type": "data",
                    "pattern": "^\\S+\\.fn?a(sta)?(\\.gz)?$",
                    "render": true
                },
                "vprimers": {
                    "name": "VPrimers",
                    "description": "The VPrimers file to use for the analysis.",
                    "required": false,
                    "type": "data",
                    "pattern": "^\\S+\\.fn?a(sta)?(\\.gz)?$",
                    "render": true
                },
                "vprimer_start": {
                    "name": "Vprimer Start",
                    "type": "number",
                    "description": "Start position of V region primers (without counting the UMI barcode).",
                    "default": 0
                },
                "cprimer_start": {
                    "name": "Cprimer Start",
                    "type": "number",
                    "description": "Start position of C region primers (without counting the UMI barcode).",
                    "default": 0
                },
                "cprimer_position": {
                    "name": "Cprimer Position",
                    "type": "string",
                    "default": "R1",
                    "description": "Indicate if C region primers are in the R1 or R2 reads.",
                    "valid": [
                        "R1",
                        "R2"
                    ]
                },
                "primer_revpr": {
                    "name": "Primer Revpr",
                    "type": "boolean",
                    "description": "Specify to match the tail-end of the sequence against the reverse complement of the primers. This also reverses the behavior of the --start argument, such that start position is relative to the tail-end of the sequence. (default: False)Maximum scoring error for the Presto MaxPrimer process for the C and/or V region primers identification."
                }
            }
        },
        {
            "name": "Protocol",
            "description": "Experimental protocol used to generate the data",
            "advanced": false,
            "params": {
                "library_generation_method": {
                    "name": "Library Generation Method",
                    "type": "string",
                    "description": "Protocol used for the V(D)J amplicon sequencing library generation.",
                    "default": "specific_pcr_umi",
                    "valid": [
                        "specific_pcr_umi",
                        "specific_pcr",
                        "dt_5p_race",
                        "dt_5p_race_umi",
                        "sc_10x_genomics",
                        "trust4"
                    ]
                },
                "race_linker": {
                    "name": "Race Linker",
                    "type": "data",
                    "pattern": "^\\S+\\.fa?sta?(\\.gz)?$",
                    "description": "Path to fasta file containing the linker sequence, if no V-region primers were used but a linker sequence is present (e.g. 5' RACE SMARTer TAKARA protocol)."
                }
            }
        },
        {
            "name": "UMI barcode handling",
            "description": "Define how UMI barcodes should be treated.",
            "advanced": true,
            "params": {
                "umi_position": {
                    "name": "UMI Position",
                    "type": "string",
                    "default": "R1",
                    "description": "Indicate if UMI indices are recorded in the R1 (default) or R1 fastq file.",
                    "valid": [
                        "R1",
                        "R2"
                    ]
                },
                "umi_length": {
                    "name": "UMI Length",
                    "type": "number",
                    "description": "UMI barcode length in nucleotides. Set to 0 if no UMIs present.",
                    "default": -1
                },
                "umi_start": {
                    "name": "UMI Start",
                    "type": "number",
                    "description": "UMI barcode start position in the index read.",
                    "default": 0
                },
                "index_file": {
                    "name": "Index File",
                    "type": "boolean",
                    "default": "true",
                    "description": "Indicate if UMI indices are recorded in a separate index file."
                }
            }
        },
        {
            "name": "Adapter trimming",
            "description": "Options for adapter trimming and read clipping",
            "advanced": true,
            "params": {
                "trim_fastq": {
                    "name": "Trim Fastq",
                    "type": "boolean",
                    "default": "true",
                    "description": "Whether to trim adapters in fastq reads with fastp."
                },
                "adapter_fasta": {
                    "name": "Adapter Fasta",
                    "type": "string",
                    "description": "Fasta file with adapter sequences to be trimmed."
                },
                "clip_r1": {
                    "name": "Clip R1",
                    "type": "number",
                    "default": 0,
                    "description": "Number of bases to clip 5' in R1 reads."
                },
                "clip_r2": {
                    "name": "Clip R2",
                    "type": "number",
                    "default": 0,
                    "description": "Number of bases to clip 5' in R2 reads."
                },
                "three_prime_clip_r1": {
                    "name": "Three Prime Clip R1",
                    "type": "number",
                    "default": 0,
                    "description": "Number of bases to clip 3' in R1 reads."
                },
                "three_prime_clip_r2": {
                    "name": "Three Prime Clip R2",
                    "type": "number",
                    "default": 0,
                    "description": "Number of bases to clip 3' in R2 reads."
                },
                "trim_nextseq": {
                    "name": "Trim Nextseq",
                    "type": "boolean",
                    "description": "Trim adapters specific for Nextseq sequencing"
                },
                "save_trimmed": {
                    "name": "Save Trimmed",
                    "type": "boolean",
                    "description": "Option to save trimmed reads."
                }
            }
        },
        {
            "name": "Sequence Assembly options",
            "description": "Options for the pRESTO sequence assembly processes",
            "advanced": true,
            "params": {
                "filterseq_q": {
                    "name": "Filterseq Q",
                    "type": "number",
                    "default": 20,
                    "description": "Quality threshold for pRESTO FilterSeq sequence filtering."
                },
                "primer_consensus": {
                    "name": "Primer Consensus",
                    "type": "number",
                    "default": 0.6,
                    "description": "Maximum error for building the primer consensus in the pRESTO Buildconsensus step."
                },
                "buildconsensus_maxerror": {
                    "name": "Buildconsensus Maxerror",
                    "type": "number",
                    "default": 0.1,
                    "description": "Maximum error for building the sequence consensus in the pRESTO BuildConsensus step."
                },
                "buildconsensus_maxgap": {
                    "name": "Buildconsensus Maxgap",
                    "type": "number",
                    "default": 0.5,
                    "description": "Maximum gap for building the sequence consensus in the pRESTO BuildConsensus step."
                },
                "cluster_sets": {
                    "name": "Cluster Sets",
                    "type": "boolean",
                    "default": "true",
                    "description": "Cluster sequences by similarity regardless of any annotation with pRESTO ClusterSets and annotate the cluster ID additionally to the UMI barcode."
                },
                "primer_r1_maxerror": {
                    "name": "Primer R1 Maxerror",
                    "type": "number",
                    "default": 0.2,
                    "description": "Maximum allowed error for R1 primer alignment."
                },
                "primer_r2_maxerror": {
                    "name": "Primer R2 Maxerror",
                    "type": "number",
                    "default": 0.2,
                    "description": "Maximum allowed error for R2 primer alignment."
                },
                "maskprimers_align": {
                    "name": "Maskprimers Align",
                    "type": "boolean",
                    "description": "Align primers instead of scoring them. Used for protocols without primer fixed positions."
                },
                "primer_maxlen": {
                    "name": "Primer Maxlen",
                    "type": "number",
                    "default": 50,
                    "description": "Maximum allowed primer length when aligning the primers."
                },
                "primer_r1_mask_mode": {
                    "name": "Primer R1 Mask Mode",
                    "type": "string",
                    "description": "Masking mode for R1 primers.",
                    "default": "cut",
                    "valid": [
                        "cut",
                        "mask",
                        "trim",
                        "tag"
                    ]
                },
                "primer_r2_mask_mode": {
                    "name": "Primer R2 Mask Mode",
                    "type": "string",
                    "default": "cut",
                    "description": "Masking mode for R2 primers.",
                    "valid": [
                        "cut",
                        "mask",
                        "trim",
                        "tag"
                    ]
                },
                "maskprimers_align_race": {
                    "name": "Maskprimers Align Race",
                    "type": "boolean",
                    "description": "Use MaskPrimers align for a 5' RACE protocol."
                },
                "maskprimers_extract": {
                    "name": "Maskprimers Extract",
                    "type": "boolean",
                    "description": "Use when primer sequences are unknown but when their approximate positions are known."
                },
                "primer_r1_extract_len": {
                    "name": "Primer R1 Extract Len",
                    "type": "number",
                    "default": 0,
                    "description": "R1 primer extract length when using `--maskprimers_extract`."
                },
                "primer_r2_extract_len": {
                    "name": "Primer R2 Extract Len",
                    "type": "number",
                    "default": 0,
                    "description": "R2 primer extract length when using `--maskprimers_extract`."
                },
                "assemblepairs_sequential": {
                    "name": "Assemblepairs Sequential",
                    "type": "boolean",
                    "description": "Use AssemblePairs sequential instead of AssemblePairs align when assembling read pairs."
                },
                "align_cregion": {
                    "name": "Align Cregion",
                    "type": "boolean",
                    "description": "Align internal C-region for a more precise isotype characterization."
                },
                "internal_cregion_sequences": {
                    "name": "Internal Cregion Sequences",
                    "type": "string",
                    "description": "Provide internal C-region sequences for a more precise C-region characterization. Then also set the `align_cregion` flag."
                },
                "cregion_maxlen": {
                    "name": "Cregion Maxlen",
                    "type": "number",
                    "default": 100,
                    "description": "Maximum allowed length when aligning the internal C-region."
                },
                "cregion_maxerror": {
                    "name": "Cregion Maxerror",
                    "type": "number",
                    "default": 0.3,
                    "description": "Maximum allowed error when aligning the internal C-region."
                },
                "cregion_mask_mode": {
                    "name": "Cregion Mask Mode",
                    "type": "string",
                    "default": "tag",
                    "description": "Mask mode for C-region alignment."
                },
                "skip_alignment_filter": {
                    "name": "Skip Alignment Filter",
                    "type": "boolean",
                    "description": "Skip filter step after alignment that ensures that locus should match the v_call chain, the sequence alignment should have at least 200 informative positions (excluding N or gaps), and maximum 10% N nucleotides in the alignment."
                },
                "igenomes_ignore": {
                    "name": "Igenomes Ignore",
                    "type": "hidden",
                    "description": "Do not load the iGenomes reference config.",
                    "default": "true"
                },
                "igenomes_base": {
                    "name": "Igenomes Base",
                    "type": "hidden",
                    "description": "The base path to the igenomes reference files",
                    "default": "s3://ngi-igenomes/igenomes/"
                }
            }
        },
        {
            "name": "Single cell analysis options",
            "description": "Options specific for raw single cell input.",
            "advanced": true,
            "params": {
                "reference_10x": {
                    "name": "Reference 10X",
                    "type": "data",
                    "pattern": "^\\S+\\.tar(\\.gz)?$",
                    "description": "Path to the reference directory required by cellranger. Can either be directory or tar.gz."
                }
            }
        },
        {
            "name": "Unselected RNA-seq based analysis options",
            "description": "Options specific for raw unselected RNA-seq input.",
            "advanced": true,
            "params": {
                "cell_barcode_read": {
                    "name": "Cell Barcode Read",
                    "type": "string",
                    "description": "Specifies which read holds the barcodes",
                    "valid": [
                        "R1",
                        "R2"
                    ]
                },
                "umi_read": {
                    "name": "UMI Read",
                    "type": "string",
                    "description": "Indicate if UMI indices are recorded in the R1 (default) or R1 fastq file.",
                    "valid": [
                        "R1",
                        "R2"
                    ]
                },
                "read_format": {
                    "name": "Read Format",
                    "type": "string",
                    "description": "Specifies where in the read the barcodes and UMIs can be found."
                }
            }
        },
        {
            "name": "VDJ annotation options",
            "description": "Options for the VDJ annotation processes.",
            "advanced": true,
            "params": {
                "reassign": {
                    "name": "Reassign",
                    "type": "boolean",
                    "default": "true",
                    "description": "Whether to reassign genes if the input file is an AIRR formatted tabulated file."
                },
                "productive_only": {
                    "name": "Productive Only",
                    "type": "boolean",
                    "default": "true",
                    "description": "Subset to productive  sequences."
                },
                "save_databases": {
                    "name": "Save Databases",
                    "type": "boolean",
                    "description": "Save databases so you can use the cache in future runs.",
                    "default": "true"
                },
                "reference_fasta": {
                    "name": "Reference Fasta",
                    "type": "hidden",
                    "description": "Path to the germline reference fasta.",
                    "default": "https://raw.githubusercontent.com/nf-core/test-datasets/airrflow/database-cache/imgtdb_base.zip"
                },
                "reference_igblast": {
                    "name": "Reference Igblast",
                    "type": "hidden",
                    "description": "Path to the cached igblast database.",
                    "default": "https://raw.githubusercontent.com/nf-core/test-datasets/airrflow/database-cache/igblast_base.zip"
                },
                "fetch_imgt": {
                    "name": "Fetch Imgt",
                    "type": "boolean",
                    "description": "Set this flag to fetch the IMGT reference data at runtime."
                }
            }
        },
        {
            "name": "Bulk filtering options",
            "description": "Options for bulk sequence filtering after VDJ assignment.",
            "advanced": true,
            "params": {
                "collapseby": {
                    "name": "Collapseby",
                    "type": "string",
                    "description": "Name of the field used to collapse duplicated sequences.",
                    "default": "sample_id"
                },
                "detect_contamination": {
                    "name": "Detect Contamination",
                    "type": "boolean",
                    "description": "Whether to run the process to detect contamination."
                },
                "remove_chimeric": {
                    "name": "Remove Chimeric",
                    "type": "boolean",
                    "description": "Whether to apply the chimera removal filter."
                }
            }
        },
        {
            "name": "Clonal analysis options",
            "description": "Define how the B-cell clonal trees should be calculated.",
            "advanced": true,
            "params": {
                "clonal_threshold": {
                    "name": "Clonal Threshold",
                    "description": "Set the clustering threshold Hamming distance value. Default: 'auto'",
                    "required": false,
                    "type": "string",
                    "default": "auto"
                },
                "lineage_trees": {
                    "name": "Lineage Trees",
                    "type": "boolean",
                    "description": "Perform clonal lineage tree analysis."
                },
                "cloneby": {
                    "name": "Cloneby",
                    "type": "string",
                    "default": "subject_id",
                    "description": "Name of the field used to group data files to identify clones."
                },
                "crossby": {
                    "name": "Crossby",
                    "type": "string",
                    "default": "subject_id",
                    "description": "Name of the field used to identify external groups used to identify a clonal threshold."
                },
                "lineage_tree_builder": {
                    "name": "Lineage Tree Builder",
                    "type": "string",
                    "default": "raxml",
                    "description": "Lineage tree software to use to build trees within Dowser. If you change the default, also set the `lineage_tree_exec` parameter.",
                    "valid": [
                        "raxml",
                        "igphyml"
                    ]
                },
                "singlecell": {
                    "name": "Singlecell",
                    "type": "string",
                    "default": "single_cell",
                    "description": "Name of the field used to determine if a sample is single cell sequencing or not."
                },
                "skip_all_clones_report": {
                    "name": "Skip All Clones Report",
                    "type": "boolean",
                    "description": "Skip report of EnchantR DefineClones for all samples together."
                },
                "skip_report_threshold": {
                    "name": "Skip Report Threshold",
                    "type": "boolean",
                    "description": "Skip report of EnchantR FindThreshold for all samples together."
                },
                "skip_clonal_analysis": {
                    "name": "Skip Clonal Analysis",
                    "type": "boolean",
                    "description": "Skip all clonal anlaysis processes"
                }
            }
        },
        {
            "name": "Translation and embedding options",
            "description": "Options to generate BCR and TCR embeddings with Amulety",
            "advanced": true,
            "params": {
                "translate": {
                    "name": "Translate",
                    "type": "boolean",
                    "description": "Generate a sequence amino acid translation with IgBlast."
                },
                "embeddings": {
                    "name": "Embeddings",
                    "type": "string",
                    "description": "Generate sequence embeddings with amulety."
                },
                "embedding_chain": {
                    "name": "Embedding Chain",
                    "type": "string",
                    "default": "H",
                    "description": "BCR or TCR chains to include for embedding."
                },
                "use_gpu": {
                    "name": "Use GPU",
                    "type": "boolean",
                    "description": "Use GPU to generate embeddings."
                }
            }
        },
        {
            "name": "Report options",
            "description": "",
            "advanced": true,
            "params": {
                "skip_report": {
                    "name": "Skip Report",
                    "type": "boolean",
                    "description": "Skip repertoire analysis and report generation."
                },
                "skip_multiqc": {
                    "name": "Skip Multiqc",
                    "type": "boolean",
                    "description": "Skip multiqc report."
                }
            }
        }
    ],
    "outputs": [
        {
            "name": "Airflow report",
            "description": "Airflow report.",
            "filetype": "html",
            "process": "AIRRFLOW_REPORT"
        },
        {
            "name": "MultiQC report",
            "description": "Report aggregating all QC reporting including FastQC, alignment stats and DeSeq2 plots.",
            "filetype": "html",
            "process": "MULTIQC"
        }
    ]
}